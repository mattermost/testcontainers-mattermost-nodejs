{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { StartedTestContainer, GenericContainer, StartedNetwork, Network, Wait } from \"testcontainers\";\nimport { StartedPostgreSqlContainer, PostgreSqlContainer } from \"@testcontainers/postgresql\";\nimport { Client4 } from \"@mattermost/client\";\nimport { Client } from 'pg'\n\nconst defaultEmail = \"admin@example.com\";\nconst defaultUsername = \"admin\";\nconst defaultPassword = \"admin\";\nconst defaultTeamName = \"test\";\nconst defaultTeamDisplayName = \"Test\";\nconst defaultMattermostImage = \"mattermost/mattermost-enterprise-edition\";\n\n// MattermostContainer represents the mattermost container type used in the module\nexport default class MattermostContainer {\n  container?: StartedTestContainer;\n  pgContainer?: StartedPostgreSqlContainer;\n  network?: StartedNetwork;\n  email: string;\n  username: string;\n  password: string;\n  teamName: string;\n  teamDisplayName: string;\n  envs: { [key: string]: string };\n  command: string[];\n  configFile: any[];\n  plugins: any[];\n\n  url(): string {\n    const containerPort = this.container?.getMappedPort(8065)\n    const host = this.container?.getHost()\n    return `http://${host}:${containerPort}`\n  }\n\n  db = async (): Promise<Client> => {\n    const port = this.pgContainer?.getMappedPort(5432)\n    const host = this.pgContainer?.getHost()\n    const database = \"mattermost_test\"\n    const client = new Client({ user: \"user\", password: \"pass\", host, port, database })\n    await client.connect()\n    return client\n  }\n\n  getAdminClient = async (): Promise<Client4> => {\n    return this.getClient(this.username, this.password)\n  }\n\n  getClient = async (username: string, password: string): Promise<Client4> => {\n    const url = this.url()\n    const client = new Client4()\n    client.setUrl(url)\n    await client.login(username, password)\n    return client\n  }\n\n  stop = async () => {\n    await this.pgContainer?.stop()\n    await this.container?.stop()\n    await this.network?.stop()\n  }\n\n  createAdmin = async (email: string, username: string, password: string) => {\n    await this.container?.exec([\"mmctl\", \"--local\", \"user\", \"create\", \"--email\", email, \"--username\", username, \"--password\", password, \"--system-admin\", \"--email-verified\"])\n  }\n\n  createUser = async (email: string, username: string, password: string) => {\n    await this.container?.exec([\"mmctl\", \"--local\", \"user\", \"create\", \"--email\", email, \"--username\", username, \"--password\", password, \"--email-verified\"])\n  }\n\n  createTeam = async (name: string, displayName: string) => {\n    await this.container?.exec([\"mmctl\", \"--local\", \"team\", \"create\", \"--name\", name, \"--display-name\", displayName])\n  }\n\n  addUserToTeam = async (username: string, teamname: string) => {\n    await this.container?.exec([\"mmctl\", \"--local\", \"team\", \"users\", \"add\", teamname, username])\n  }\n\n  getLogs = async (lines: number): Promise<string> => {\n    const result = await this.container?.exec([\"mmctl\", \"--local\", \"logs\", \"--number\", lines.toString()])\n    if (result) {\n      return result.output\n    }\n    return ''\n  }\n\n  setSiteURL = async () => {\n    const url = this.url()\n    await this.container?.exec([\"mmctl\", \"--local\", \"config\", \"set\", \"ServiceSettings.SiteURL\", url])\n    const containerPort = this.container?.getMappedPort(8065)\n    await this.container?.exec([\"mmctl\", \"--local\", \"config\", \"set\", \"ServiceSettings.ListenAddress\", `${containerPort}`])\n  }\n\n  installPlugin = async (pluginPath: string, pluginID: string, pluginConfig: any) => {\n    const patch = JSON.stringify({ PluginSettings: { Plugins: { [pluginID]: pluginConfig } } })\n\n    await this.container?.copyFilesToContainer([{ source: pluginPath, target: `/tmp/plugin.tar.gz` }])\n    await this.container?.copyContentToContainer([{ content: patch, target: `/tmp/plugin.config.json` }])\n\n    await this.container?.exec([\"mmctl\", \"--local\", \"plugin\", \"add\", '/tmp/plugin.tar.gz'])\n    await this.container?.exec([\"mmctl\", \"--local\", \"config\", \"patch\", '/tmp/plugin.config.json'])\n    await this.container?.exec([\"mmctl\", \"--local\", \"plugin\", \"enable\", pluginID])\n  }\n\n  withEnv = (env: string, value: string): MattermostContainer => {\n    this.envs[env] = value\n    return this\n  }\n\n  withAdmin = (email: string, username: string, password: string): MattermostContainer => {\n    this.email = email;\n    this.username = username;\n    this.password = password;\n    return this;\n  }\n\n  withTeam = (teamName: string, teamDisplayName: string): MattermostContainer => {\n    this.teamName = teamName;\n    this.teamDisplayName = teamDisplayName;\n    return this;\n  }\n\n  withConfigFile = (cfg: string): MattermostContainer => {\n    const cfgFile = {\n      source: cfg,\n      target: \"/etc/mattermost.json\",\n    }\n    this.configFile.push(cfgFile)\n    this.command.push(\"-c\", \"/etc/mattermost.json\")\n    return this\n  }\n\n  withPlugin = (pluginPath: string, pluginID: string, pluginConfig: any): MattermostContainer => {\n    this.plugins.push({ id: pluginID, path: pluginPath, config: pluginConfig })\n\n    return this\n  }\n\n  constructor() {\n    this.command = [\"mattermost\", \"server\"];\n    const dbconn = `postgres://user:pass@db:5432/mattermost_test?sslmode=disable`;\n    this.envs = {\n      \"MM_SQLSETTINGS_DATASOURCE\": dbconn,\n      \"MM_SQLSETTINGS_DRIVERNAME\": \"postgres\",\n      \"MM_SERVICESETTINGS_ENABLELOCALMODE\": \"true\",\n      \"MM_PASSWORDSETTINGS_MINIMUMLENGTH\": \"5\",\n      \"MM_PLUGINSETTINGS_ENABLEUPLOADS\": \"true\",\n      \"MM_FILESETTINGS_MAXFILESIZE\": \"256000000\",\n      \"MM_LOGSETTINGS_CONSOLELEVEL\": \"DEBUG\",\n      \"MM_LOGSETTINGS_FILELEVEL\": \"DEBUG\",\n      \"MM_SERVICESETTINGS_ENABLEDEVELOPER\": \"true\",\n      \"MM_SERVICESETTINGS_ENABLETESTING\": \"true\",\n    };\n    this.email = defaultEmail;\n    this.username = defaultUsername;\n    this.password = defaultPassword;\n    this.teamName = defaultTeamName;\n    this.teamDisplayName = defaultTeamDisplayName;\n    this.plugins = [];\n    this.configFile = [];\n  }\n\n  start = async (): Promise<MattermostContainer> => {\n    this.network = await new Network().start()\n    this.pgContainer = await new PostgreSqlContainer(\"docker.io/postgres:15.2-alpine\")\n      .withExposedPorts(5432)\n      .withDatabase(\"mattermost_test\")\n      .withUsername(\"user\")\n      .withPassword(\"pass\")\n      .withNetworkMode(this.network.getName())\n      .withWaitStrategy(Wait.forLogMessage(\"database system is ready to accept connections\"))\n      .withNetworkAliases(\"db\")\n      .start()\n\n    this.container = await new GenericContainer(defaultMattermostImage)\n      .withEnvironment(this.envs)\n      .withExposedPorts(8065)\n      .withNetwork(this.network)\n      .withNetworkAliases(\"mattermost\")\n      .withCommand(this.command)\n      .withWaitStrategy(Wait.forLogMessage(\"Server is listening on\"))\n      .withCopyFilesToContainer(this.configFile)\n      .withLogConsumer((stream) => {\n        stream.on('data', (data: string) => {\n          if (data.includes('\"plugin_id\":\"mattermost-ai\"')) {\n            console.log(data)\n          }\n        })\n      })\n      .start()\n\n\n    await this.setSiteURL()\n    await this.createAdmin(this.email, this.username, this.password)\n    await this.createTeam(this.teamName, this.teamDisplayName)\n    await this.addUserToTeam(this.username, this.teamName)\n\n    for (const plugin of this.plugins) {\n      await this.installPlugin(plugin.path, plugin.id, plugin.config)\n    }\n\n    return this\n  }\n}\n"],"mappings":"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","names":[]}